####    Makefile-macOS
###
###
#
#	cd <xxxxx>/rtl-sdr
# rm -rf build
# mkdir build
# cd build
# make -f ../Makefile-macOS



LIBUSBSTATICDIRx86  = ../../libusb-1.0.26/build-static-x86_64-macos12
LIBUSBSTATICDIRARM  = ../../libusb-1.0.26/build-static-arm64-macos12
LIBUSBINCLUDE				= ../../libusb-1.0.26/libusb

SRCDIR      = ../src
INCLUDEDIR  = ../include

SOURCE      = $(SRCDIR)/rtl_tcp.c \
              $(SRCDIR)/librtlsdr.c \
							$(SRCDIR)/tuner_r82xx.c \
							$(SRCDIR)/tuner_e4k.c \
							$(SRCDIR)/tuner_fc0012.c \
							$(SRCDIR)/tuner_fc0013.c \
							$(SRCDIR)/tuner_fc2580.c \
							$(SRCDIR)/convenience/convenience.c

LIBx86      = $(LIBUSBSTATICDIRx86)/libusb-1.0.a \
							$(LIBUSBSTATICDIRx86)/darwin_usb.o


LIBARM      = $(LIBUSBSTATICDIRARM)/libusb-1.0.a \
							$(LIBUSBSTATICDIRARM)/darwin_usb.o


EXECUTABLE  = rtl_tcp
VERSION     = 2.0.1
MACOS       = macos12
PROFILE     = "SDR"


FOLDER      = $(EXECUTABLE)-$(VERSION)-$(MACOS)
DMG					= $(FOLDER).dmg
PKG					= $(FOLDER).pkg

SIGNID			= "Developer ID Application: Transition Technology Ventures, LLC (6V82P5ET42)"
INSTALLID		= "Developer ID Installer: Transition Technology Ventures, LLC (6V82P5ET42)"

INSTALL 		= /usr/local/bin

rtl_tcp:			$(SOURCE)

								clang $(SOURCE)  $(LIBx86) \
								    -framework Foundation  \
							      -framework IOKit  \
										-framework Security \
										-I. \
										-I$(LIBUSBINCLUDE) \
										-I$(INCLUDEDIR) \
										-L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
										-lm \
										 -target x86_64-apple-$(MACOS) -o $(EXECUTABLE)-x86_64

								clang $(SOURCE)  $(LIBARM) \
										 -framework Foundation  \
										 -framework IOKit  \
										 -framework Security \
										 -I. \
										 -I$(LIBUSBINCLUDE) \
										 -I$(INCLUDEDIR) \
										 -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
										 -lm \
										 -target arm64-apple-$(MACOS)  -o $(EXECUTABLE)-arm64

								lipo -create -output $(EXECUTABLE) $(EXECUTABLE)-x86_64 $(EXECUTABLE)-arm64
								lipo -archs $(EXECUTABLE)
								otool -L $(EXECUTABLE)


dmg:			     $(EXECUTABLE)

								mkdir $(FOLDER)
								cp $(EXECUTABLE) $(FOLDER)
								codesign -vf --timestamp --options runtime --sign $(SIGNID) $(FOLDER)/$(EXECUTABLE)
								hdiutil create -fs HFS+ -srcfolder $(FOLDER) -volname $(FOLDER) $(FOLDER).dmg
								codesign -vf --timestamp --options runtime --sign $(SIGNID) $(DMG)
								codesign --verify --verbose $(DMG)
								xcrun notarytool submit $(DMG) --keychain-profile $(PROFILE) --wait
								spctl -a -t open --context context:primary-signature -v $(DMG)
								xcrun stapler staple  xcrun stapler $(DMG)
								xcrun stapler validate $(DMG)

pkg:						$(EXECUTABLE)

								 mkdir $(FOLDER)-pkg
								 cp $(EXECUTABLE)	$(FOLDER)-pkg
								 codesign -vf --timestamp --options runtime --sign $(SIGNID) $(FOLDER)-pkg/$(EXECUTABLE)
								 pkgbuild --root ./$(FOLDER)-pkg \
								 					--identifier $(EXECUTABLE) \
								 					--install-location $(INSTALL) \
								 					--sign $(INSTALLID) \
													$(PKG)
								 pkgutil --check-signature $(PKG)
								 xcrun notarytool submit $(PKG) --keychain-profile $(PROFILE) --wait
								 xcrun stapler staple $(PKG)
								 xcrun stapler validate $(PKG)
								 spctl --assess --verbose --type install $(PKG)
